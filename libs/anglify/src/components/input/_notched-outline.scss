@use 'variables' as *;

@mixin notched-outline() {
  $border-radius: var(--anglify-notched-outline-border-radius, 4px);
  $start-width: var(--anglify-notched-outline-start-width, 0);
  $border-color: var(--anglify-notched-outline-border-color, #000);
  $border-width: var(--anglify-notched-outline-border-width, $input-outlined-border-width-inactive);
  $notch-width: var(--anglify-notched-outline-notch-width, 100%);

  .start {
    width: calc(#{$start-width} - var(--anglify-notched-outline-padding));
    box-sizing: border-box;
    flex-shrink: 0;
    border-block-end: solid $border-width $border-color;
    border-block-start: solid $border-width $border-color;
    border-end-start-radius: $border-radius;
    border-inline-start: solid $border-width $border-color;
    border-start-start-radius: $border-radius;
  }

  .notch {
    position: relative;
    max-width: calc(100% - #{$start-width} - #{$start-width});
    box-sizing: border-box;
    border-block-end: solid $border-width $border-color;

    // This pseudo element is responsible for the notch border width animation
    &::after {
      position: absolute;
      top: 0;
      right: 0;
      width: $notch-width;
      border-top: $border-width solid $border-color;
      content: '';
      transition: width 0.2s cubic-bezier(0.25, 0.8, 0.5, 1);
    }
  }

  .end {
    min-width: $start-width;
    box-sizing: border-box;
    flex: 1;
    border-block-end: solid $border-width $border-color;
    border-block-start: solid $border-width $border-color;
    border-end-end-radius: $border-radius;
    border-inline-end: solid $border-width $border-color;
    border-start-end-radius: $border-radius;
  }
}
