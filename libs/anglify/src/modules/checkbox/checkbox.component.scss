@use 'variables' as *;

::ng-deep {
  label .container .checkbox-custom-icons {
    anglify-icon {
      --anglify-icon-size-regular: #{$checkbox-custom-icon-size};
    }
  }

  input:disabled + .container .checkbox-custom-icons {
    anglify-icon {
      color: $checkbox-disabled-color;
    }
  }

  input:checked:not([disabled]) + .container .checkbox-custom-icons {
    anglify-icon {
      color: $checkbox-checked-color;
    }
  }
}

:host {
  display: block;
  user-select: none;

  .before {
    flex-flow: row-reverse;
  }

  label {
    display: flex;
    position: relative;

    .container {
      width: $checkbox-ripple-inner-width;
      height: $checkbox-ripple-inner-height;
      display: flex;
      overflow: visible;
      position: relative;

      .state-container {
        height: $checkbox-ripple-height;
        width: $checkbox-ripple-width;
        margin: $checkbox-ripple-margin;
        border-radius: $checkbox-ripple-border-radius;
        position: absolute;
      }

      .check-box-effect {
        display: inline-flex;
        position: relative;
        pointer-events: none;
        width: $checkbox-width;
        height: $checkbox-height;
        border-width: $checkbox-border-width;
        border-style: solid;
        border-color: $checkbox-border-color;
        margin: auto;
        border-radius: $checkbox-border-radius;

        &::after {
          content: '';
          width: 0;
          height: $checkbox-icon-after-height;
          border-radius: 3px;
          background: $checkbox-icon-color;
          position: absolute;
          transform: rotate(305deg);
          top: $checkbox-icon-after-top-position;
          left: $checkbox-icon-after-left-position;
          transition: width 50ms ease;
          transform-origin: 0% 0%;
        }

        &::before {
          content: '';
          width: 0;
          height: $checkbox-icon-before-height;
          border-radius: 3px;
          background: $checkbox-icon-color;
          position: absolute;
          transform: rotate(45deg);
          top: $checkbox-icon-before-top-position;
          left: $checkbox-icon-before-left-position;
          transition: width 50ms ease 50ms;
          transform-origin: 0% 0%;
        }
      }

      /* stylelint-disable-next-line no-descending-specificity */
      .checkbox-custom-icons {
        height: $checkbox-custom-icon-size;
        width: $checkbox-custom-icon-size;
      }
    }

    .checkbox-label {
      display: flex;
      font: $checkbox-label-font;
      letter-spacing: $checkbox-label-letter-spacing;
      text-transform: $checkbox-label-text-transform;
      align-items: center;
      padding: $checkbox-label-margin;
    }
  }

  input {
    // Input should be hidden but we still want it to be focusable
    opacity: 0;
    position: absolute;
    pointer-events: none;
    user-select: none;
  }

  // Unchecked styles for only enabled state
  input:not(:disabled) {
    & ~ .checkbox-label,
    & ~ .container .state-container {
      cursor: pointer;
    }

    & ~ .container {
      .state-container:hover {
        --state-container-color: #{$checkbox-hover-state-inactive-color};
      }
    }
  }

  // Unchecked styles for only disabled state
  input:disabled {
    & ~ .checkbox-label {
      color: $checkbox-disabled-color;
    }
  }

  // Unchecked styles for both enabled and disabled state
  input:not(:checked) {
    &:focus-visible {
      & ~ .container {
        --state-container-color: #{$checkbox-focus-state-inactive-color};
      }
    }
  }

  // Checked styles for both enabled and disabled state
  /* stylelint-disable-next-line no-descending-specificity */
  input:checked {
    /* stylelint-disable-next-line no-descending-specificity */
    & ~ .container {
      .check-box-effect {
        background-color: $checkbox-checked-color !important;
        border-color: $checkbox-checked-border-color;

        &::before {
          width: $checkbox-icon-before-width;
          background: $checkbox-checked-icon-color;
          transition: $checkbox-checked-icon-transition-speed;
        }

        &::after {
          width: $checkbox-icon-after-width;
          background: $checkbox-checked-icon-color;
          transition: $checkbox-checked-icon-transition-speed;
        }
      }
    }

    &:focus-visible {
      & ~ .container {
        --state-container-color: #{$checkbox-focus-state-active-color};
      }
    }
  }

  // Checked styles for only disabled state
  input:checked:disabled + .container .check-box-effect {
    background-color: $checkbox-disabled-color !important;
    border-color: transparent;
  }

  // Checked styles for only enabled state
  input:checked:not(:disabled) {
    & ~ .checkbox-label,
    & ~ .container .state-container {
      cursor: pointer;
    }

    & ~ .container {
      .state-container:hover {
        --state-container-color: #{$checkbox-hover-state-active-color};
      }
    }
  }
}
